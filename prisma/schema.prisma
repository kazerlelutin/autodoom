// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Device {
  id         String       @id @default(uuid())
  name       String       @unique
  updatedAt  DateTime     @updatedAt
  articles   Content[] // Renommé en "Content"
  isActive   Boolean      @default(false) // Active après modération
  moderation Moderation[]
  Search     Search[]
}

model Moderator {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String
  lang              String              @default("fr")
  lastPing          DateTime?
  ActionLog         ActionLog[]
  ModerationRequest ModerationRequest[]
}

model CronLog {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  name      String
}

model ActionLog {
  id          String     @id @default(uuid())
  actionType  ActionType
  moderator   Moderator  @relation(fields: [moderatorId], references: [id])
  moderatorId String
  timestamp   DateTime   @default(now())
  detailsKey  String     @unique @default(uuid()) // Renommé en "detailsKey"
}

enum RequestType {
  ARTICLE_APPROVAL
  DEVICE_APPROVAL
}

model Translation {
  id       String @id @default(uuid())
  key      String
  language String
  text     String
}

model Content {
  id          String      @id @default(uuid())
  type        ContentType // article ou podcast
  image       String // URL vers l'image du contenu
  audio       String // URL vers le fichier audio
  duration    Int // Durée en secondes
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  translations ContentTranslation[] // Nouvelle relation pour les traductions

  // Relations
  moderation Moderation[]
  Device     Device?      @relation(fields: [deviceId], references: [id])
  deviceId   String?
  Search     Search[]
}

model ContentTranslation {
  id          String  @id @default(uuid())
  content     Content @relation(fields: [contentId], references: [id])
  contentId   String
  language    String
  title       String
  description String
}

model Moderation {
  id                 String              @id @default(uuid())
  type               RequestType
  device             Device?             @relation(fields: [deviceId], references: [id])
  article            Content?            @relation(fields: [articleId], references: [id]) // Renommé en "Content"
  deviceId           String?
  articleId          String?
  acceptedCount      Int                 @default(0)
  rejectedCount      Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  moderationRequests ModerationRequest[] // relation to moderation requests
}

model ModerationRequest {
  id             String    @id @default(uuid())
  token          String    @unique
  lastSent       DateTime? // last time a reminder was sent
  remindersCount Int       @default(0) // number of reminders sent
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  moderatorId    String

  moderator    Moderator   @relation(fields: [moderatorId], references: [id])
  moderation   Moderation? @relation(fields: [moderationId], references: [id])
  moderationId String?
}

model Search {
  id                  String   @id @default(uuid())
  searchPhrase        String
  isActive            Boolean  @default(true)
  isBlacklisted       Boolean  @default(false)
  hasGeneratedArticle Boolean  @default(false)
  article             Content? @relation(fields: [articleId], references: [id]) // Renommé en "Content"
  device              Device?  @relation(fields: [deviceId], references: [id])
  deviceId            String?
  articleId           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum RequestResult {
  APPROVED
  REJECTED
  PENDING
}

enum ActionType {
  DEVICE_APPROVAL
  DEVICE_REJECTION
  ARTICLE_APPROVAL
  ARTICLE_REJECTION
  ARTICLE_REPORT
}

enum ContentType {
  ARTICLE
  PODCAST
}
