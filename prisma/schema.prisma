// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Device {
  id        String    @id @default(uuid())
  name      String    @unique
  updatedAt DateTime  @updatedAt
  articles  Article[]
  isActive  Boolean   @default(false) // Active après modération
}

model Article {
  id       String @id @unique @default(uuid())
  device   Device @relation(fields: [deviceId], references: [id])
  deviceId String

  sourceUrl String // Lien vers la source de l'article
  isValid   Boolean @default(false) // Valide après modération
  reports   Int     @default(0)

  image          String? // URL vers l'image du podcast et de l'article
  youtubeVideoId String? // ID de la vidéo Youtube
  updatedAt      DateTime @updatedAt

  // translate fields-----------------------------------------------------------------------------------------------
  titleKey       String @unique @default(uuid())
  descriptionKey String @unique @default(uuid())
  contentKey     String @unique @default(uuid())

  // Relations ----------------------------------------------------------------------------------------------------
  Podcast Podcast?
}

model Podcast {
  id String @id @unique @default(uuid())

  image       String // URL vers l'image du podcast
  audio       String // URL vers le fichier audio
  duration    Int // Durée en secondes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // translate fields-----------------------------------------------------------------------------------------------
  titleKey   String @unique @default(uuid()) //translate
  summaryKey String @unique @default(uuid()) //translate

  // Relations ----------------------------------------------------------------------------------------------------
  Article   Article @relation(fields: [articleId], references: [id])
  articleId String  @unique
}

model Moderator {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String
  lang              String              @default("fr")
  lastPing          DateTime?
  ActionLog         ActionLog[]
  ModerationRequest ModerationRequest[]
}

model ActionLog {
  id          String     @id @default(uuid())
  actionType  ActionType
  moderator   Moderator  @relation(fields: [moderatorId], references: [id])
  moderatorId String
  timestamp   DateTime   @default(now())

  // Translate fields ----------------------------------------------------------------------------------------------------
  detailsKey String @unique @default(uuid()) //resume of action
}

enum RequestType {
  ARTICLE_APPROVAL
  DEVICE_APPROVAL
}

model Translation {
  id       String @id @default(uuid())
  key      String
  language String
  text     String
}

model Moderation {
  id                 String              @id @default(uuid())
  token              String              @unique
  type               RequestType
  associatedId       String // element id Associated to the request
  acceptedCount      Int                 @default(0)
  rejectedCount      Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  moderationRequests ModerationRequest[] // relation to moderation requests
}

model ModerationRequest {
  id             String    @id @default(uuid())
  token          String    @unique
  lastSent       DateTime? // last time a reminder was sent
  remindersCount Int       @default(0) // number of reminders sent
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  moderatorId    String

  moderator    Moderator   @relation(fields: [moderatorId], references: [id])
  moderation   Moderation? @relation(fields: [moderationId], references: [id])
  moderationId String?
}

enum RequestResult {
  APPROVED
  REJECTED
  PENDING
}

enum ActionType {
  DEVICE_APPROVAL
  DEVICE_REJECTION
  ARTICLE_APPROVAL
  ARTICLE_REJECTION
  ARTICLE_REPORT
}
